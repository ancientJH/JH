
function assemble_element_ϕ!(Ke::Matrix, Re::Vector, cellvalues_ϕ, ϕe::Vector, material::Material, state, state_old)
    nbase_ϕ = getnbasefunctions(cellvalues_ϕ);
    Gc = material.Gc;
    ℓ = material.ℓ;
    @inbounds for q_point in 1:getnquadpoints(cellvalues_ϕ)
        dΩᵩ = getdetJdV(cellvalues_ϕ, q_point);
        ϕ = function_value(cellvalues_ϕ, q_point, ϕe);
        ∇ϕ = function_gradient(cellvalues_ϕ, q_point, ϕe);

        H = state[q_point].H;
        state[q_point] = HistoryVariable(H, ϕ);
        _, gd′, gd′′ = Degradation(ϕ, material);
        @inbounds for i in 1:nbase_ϕ
            δϕ = shape_value(cellvalues_ϕ, q_point, i);
            ∇δϕ = shape_gradient(cellvalues_ϕ, q_point, i);
            for j in 1:i
                ϕ′ = shape_value(cellvalues_ϕ, q_point, j);
                ∇ϕ′ = shape_gradient(cellvalues_ϕ, q_point, j);
                Ke[i, j] += (gd′′ * ϕ′ * H * δϕ + Gc / ℓ * δϕ * ϕ′ + Gc * ℓ * ∇δϕ ⋅ ∇ϕ′) * dΩᵩ;
            end
            Re[i] += (gd′ * H * δϕ + Gc / ℓ * δϕ * ϕ + Gc * ℓ * ∇δϕ ⋅ ∇ϕ) * dΩᵩ;
        end
    end
    symmetrize_lower!(Ke)
    return Ke, Re
end

function assemble_residual_ϕ!(Re::Vector, cellvalues_ϕ, ϕe::Vector, material::Material, state, state_old, store::Bool)
    nbase_ϕ = getnbasefunctions(cellvalues_ϕ);
    Gc = material.Gc;
    ℓ = material.ℓ;
    @inbounds for q_point in 1:getnquadpoints(cellvalues_ϕ);
        dΩᵩ = getdetJdV(cellvalues_ϕ, q_point);
        ϕ = function_value(cellvalues_ϕ, q_point, ϕe);
        ∇ϕ = function_gradient(cellvalues_ϕ, q_point, ϕe);
        H = state[q_point].H;
        if store
            state[q_point] = HistoryVariable(H, ϕ);
        end       
        _, gd′, _ = Degradation(ϕ, material);
        @inbounds for i in 1:nbase_ϕ
            δϕ = shape_value(cellvalues_ϕ, q_point, i);
            ∇δϕ = shape_gradient(cellvalues_ϕ, q_point, i);
            Re[i] += (gd′ * H * δϕ +  Gc / ℓ * δϕ * ϕ +  Gc * ℓ * ∇δϕ ⋅ ∇ϕ) * dΩᵩ;
        end
    end
    return Re
end

function symmetrize_lower!(K)
    LinearAlgebra.copytri!(K, 'L')
end

function assemble_element_Kϕ!(Ke::Matrix, cellvalues_ϕ, ϕe::Vector, material::Material, state, state_old)
    nbase_ϕ = getnbasefunctions(cellvalues_ϕ);
    Gc = material.Gc;
    ℓ = material.ℓ;
    @inbounds for q_point in 1:getnquadpoints(cellvalues_ϕ)
        dΩᵩ = getdetJdV(cellvalues_ϕ, q_point);
        ϕ = function_value(cellvalues_ϕ, q_point, ϕe);

        H = state[q_point].H;
        _, _, gd′′ = Degradation(ϕ, material);
        @inbounds for i in 1:nbase_ϕ
            δϕ = shape_value(cellvalues_ϕ, q_point, i);
            ∇δϕ = shape_gradient(cellvalues_ϕ, q_point, i);
            for j in 1:i
                ϕ′ = shape_value(cellvalues_ϕ, q_point, j);
                ∇ϕ′ = shape_gradient(cellvalues_ϕ, q_point, j);
                Ke[i, j] += (gd′′ * ϕ′ * H * δϕ + Gc / ℓ * δϕ * ϕ′ + Gc * ℓ * ∇δϕ ⋅ ∇ϕ′) * dΩᵩ;
            end
        end
    end
    symmetrize_lower!(Ke)
    return Ke
end

function assemble_global_Kϕ(q::Vector, cellvalues, K::SparseMatrixCSC, dh::DofHandler, material::Material, states, states_old)
    nbase = getnbasefunctions(cellvalues);

    Ke = zeros(nbase, nbase);

    assembler = start_assemble(K);

    @inbounds for (i, cell) in enumerate(CellIterator(dh))
        reinit!(cellvalues, cell);
        fill!(Ke, 0);
        eldofs = celldofs(cell);
        qe = q[eldofs];
        state = @view states[:, i];
        state_old = @view states_old[:, i];
        assemble_element_Kϕ!(Ke, cellvalues, qe, material, state, state_old);
        assemble!(assembler, eldofs, Ke);
        
    end
    return K
end;