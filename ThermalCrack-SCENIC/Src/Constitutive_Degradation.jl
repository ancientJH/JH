function Degradation(œï::Float64, mat::Material)
    kmin = 1e-10;
    flagD = mat.flagD
    if flagD == QuadraticDegradation
        gd = (1.0 - œï)^2 + kmin; 
        gd‚Ä≤ = -2.0(1.0 - œï);
        gd‚Ä≤‚Ä≤ = 2.0;
    elseif flagD == WuDegradation
        a‚ÇÅ = mat.a‚ÇÅ;
        fact = (1.0 - œï)^2 + a‚ÇÅ*œï*(1 - 0.5œï);
        gd = (1.0 - œï)^2/fact + kmin;
        gd‚Ä≤ = -a‚ÇÅ*(1.0 - œï)/fact^2;
        gd‚Ä≤‚Ä≤ = 2a‚ÇÅ^2/fact^3 - 3a‚ÇÅ/fact^2;
        gd‚Ä≤‚Ä≤ = gd‚Ä≤‚Ä≤>0 ? gd‚Ä≤‚Ä≤ : 0;
    elseif flagD == HughesDegradation
        s = mat.s;
        fact = ((s-1)/s)^((1.0 - œï)^2);
        fact2 = log(s/(s-1));
        gd = s*(1 - fact) + kmin;
        gd‚Ä≤ = -2s*(1.0 - œï)*fact*fact2;
        gd‚Ä≤‚Ä≤ = 2s*fact2*fact*(1-2fact2*(1.0 - œï)^2);
        gd‚Ä≤‚Ä≤ = gd‚Ä≤‚Ä≤>0 ? gd‚Ä≤‚Ä≤ : 0;
    end
    return gd, gd‚Ä≤, gd‚Ä≤‚Ä≤
end

function Constitutive(Œµ::SymmetricTensor{2,3,Float64}, mat::Material, gdn::Float64)
    Heaviside(x::AbstractFloat) = ifelse(x < 0, zero(x), ifelse(x > 0, one(x), oftype(x, 0.5)))
    flag = mat.flag
    if flag == Isotropic
        Œº = mat.G;
        Œª = mat.Œª;
        I = one(SymmetricTensor{2,3});
        ùïÄ = one(SymmetricTensor{4,3});
        D = Œª * I ‚äó I + 2Œº * ùïÄ;
        Œ®‚Å∫ = 0.5 * Œµ ‚ä° D ‚ä° Œµ;
        D·µâ = gdn * D; 
        œÉ = D·µâ ‚ä° Œµ;
    elseif flag == VolDev 
        K = mat.K;
        G = mat.G;
        I = one(SymmetricTensor{2,3});
        ùïÄ = one(SymmetricTensor{4,3});
        D‚Å∫ = K * Heaviside(tr(Œµ)) * I ‚äó I + 2G * (ùïÄ - 1 / 3 * I ‚äó I);
        D‚Åª = K * Heaviside(-tr(Œµ)) * I ‚äó I;
        Œ®‚Å∫ = tr(Œµ) >0 ? 0.5*K*tr(Œµ)^2 + G*dev(Œµ) ‚ä° dev(Œµ) : G*dev(Œµ) ‚ä° dev(Œµ);
        œÉ‚Å∫ = tr(Œµ) >0 ? K*tr(Œµ)*I + 2G*dev(Œµ) : 2G*dev(Œµ); 
        œÉ‚Åª = tr(Œµ) <0 ? K*tr(Œµ)*I  : zero(Tensor{2, 3}); 
        D·µâ = gdn * D‚Å∫ + D‚Åª;
        œÉ = gdn *œÉ‚Å∫ + œÉ‚Åª;
    elseif flag == Spectral 
        Œµ‚Çô, V‚Çô = eigen(Œµ);        # Œµ‚Çô = eigvals(Œµ)
        Œº = mat.G;
        Œª = mat.Œª;
        bracket‚Çä(a::AbstractFloat) = a > 0 ? a : 0;
        bracket‚Çã(a::AbstractFloat) = a < 0 ? a : 0;
        H‚ÇÅ‚ÇÇ‚Å∫(x::AbstractFloat, y::AbstractFloat) = x ‚â† y ? (bracket‚Çä(x) - bracket‚Çä(y)) / (x - y) : Heaviside(x);
        H‚ÇÅ‚ÇÇ‚Åª(x::AbstractFloat, y::AbstractFloat) = x ‚â† y ? (bracket‚Çã(x) - bracket‚Çã(y)) / (x - y) : Heaviside(-x);
        I = one(SymmetricTensor{2,3});
        Œ®‚Å∫ = tr(Œµ) >0 ? Œª/2*tr(Œµ)^2 : 0.0;
        for e in Œµ‚Çô;Œ®‚Å∫ += e>0 ? Œº*e^2 : 0.0;end;
        œÉ‚Å∫ = Œª*bracket‚Çä(tr(Œµ))*I + 2Œº*(bracket‚Çä(Œµ‚Çô[1])*V‚Çô[:,1]‚äóV‚Çô[:,1] + bracket‚Çä(Œµ‚Çô[2])*V‚Çô[:,2]‚äóV‚Çô[:,2] + bracket‚Çä(Œµ‚Çô[3])*V‚Çô[:,3]‚äóV‚Çô[:,3]);
        œÉ‚Åª = Œª*bracket‚Çã(tr(Œµ))*I + 2Œº*(bracket‚Çã(Œµ‚Çô[1])*V‚Çô[:,1]‚äóV‚Çô[:,1] + bracket‚Çã(Œµ‚Çô[2])*V‚Çô[:,2]‚äóV‚Çô[:,2] + bracket‚Çã(Œµ‚Çô[3])*V‚Çô[:,3]‚äóV‚Çô[:,3]);
        D‚Å∫ = Œª * Heaviside(tr(Œµ)) * I ‚äó I;
        D‚Åª = Œª * Heaviside(-tr(Œµ)) * I ‚äó I;
        for a in 1:3
            D‚Å∫ += 2Œº * Heaviside(Œµ‚Çô[a]) * (V‚Çô[:, a] ‚äó V‚Çô[:, a]) ‚äó (V‚Çô[:, a] ‚äó V‚Çô[:, a]);
            D‚Åª += 2Œº * Heaviside(-Œµ‚Çô[a]) * (V‚Çô[:, a] ‚äó V‚Çô[:, a]) ‚äó (V‚Çô[:, a] ‚äó V‚Çô[:, a]);
            for b in 1:3
                if a ‚â† b
                    D‚Å∫ += Œº * H‚ÇÅ‚ÇÇ‚Å∫(Œµ‚Çô[a], Œµ‚Çô[b]) * ((V‚Çô[:, a] ‚äó V‚Çô[:, b]) ‚äó (V‚Çô[:, a] ‚äó V‚Çô[:, b]) + (V‚Çô[:, a] ‚äó V‚Çô[:, b]) ‚äó (V‚Çô[:, b] ‚äó V‚Çô[:, a]));
                    D‚Åª += Œº * H‚ÇÅ‚ÇÇ‚Åª(Œµ‚Çô[a], Œµ‚Çô[b]) * ((V‚Çô[:, a] ‚äó V‚Çô[:, b]) ‚äó (V‚Çô[:, a] ‚äó V‚Çô[:, b]) + (V‚Çô[:, a] ‚äó V‚Çô[:, b]) ‚äó (V‚Çô[:, b] ‚äó V‚Çô[:, a]));
                end
            end
        end
        D·µâ = gdn * D‚Å∫ + D‚Åª;
        œÉ = gdn *œÉ‚Å∫ + œÉ‚Åª;
    elseif flag == HybridSpectral 
        Œµ‚Çö= eigvals(Œµ)
        Œº = mat.G;
        Œª = mat.Œª;
        I = one(SymmetricTensor{2,3});
        ùïÄ = one(SymmetricTensor{4,3});
        D = Œª * I ‚äó I + 2Œº * ùïÄ;
        D·µâ = gdn * D; 
        œÉ = D·µâ ‚ä° Œµ;
        Œ®‚Å∫ = sum(Œµ‚Çö)>0 ? Œª/2*sum(Œµ‚Çö)^2 : 0.0
        for e in Œµ‚Çö
            Œ®‚Å∫ += e>0 ? Œº*e^2 : 0.0
        end
    end
    return Œ®‚Å∫, D·µâ, œÉ, œÉ‚Å∫
end