
function assemble_element_u!(Ke, Re, cellvalues_u, ue, material, state, state_old)
    nbase_u = getnbasefunctions(cellvalues_u);
    @inbounds for q_point in 1:getnquadpoints(cellvalues_u)
        dΩᵤ = getdetJdV(cellvalues_u, q_point)
        if material.dim == 2
            ε_PlaneStrain = function_symmetric_gradient(cellvalues_u, q_point, ue)
            ∇ˢu = SymmetricTensor{2,3,Float64}((ε_PlaneStrain[1, 1], ε_PlaneStrain[1, 2], 0.0,ε_PlaneStrain[2, 2], 0.0, 0.0))
        elseif material.dim == 3
            ∇ˢu = function_symmetric_gradient(cellvalues_u, q_point, ue)
        else
            error("Invalid element dimension")
        end

        ϕ = state[q_point].ϕ
        gd, _, _ = Degradation(ϕ, material);
        Ψ⁺, Dᵉ, σ = Constitutive(∇ˢu, material, gd);
        H = max(Ψ⁺, state_old[q_point].H);
        state[q_point] = HistoryVariable(H, ϕ);

        @inbounds for i in 1:nbase_u
            if material.dim == 2
                δε_2d = shape_symmetric_gradient(cellvalues_u, q_point, i);
                δε = SymmetricTensor{2,3,Float64}((δε_2d[1, 1], δε_2d[1, 2], 0.0,δε_2d[2, 2], 0.0, 0.0));
            else
                δε = shape_symmetric_gradient(cellvalues_u, q_point, i);
            end
            @inbounds for j in 1:i
                if material.dim == 2
                    ε_2d = shape_symmetric_gradient(cellvalues_u, q_point, j);
                    ε̄u = SymmetricTensor{2,3,Float64}((ε_2d[1, 1], ε_2d[1, 2], 0.0,
                        ε_2d[2, 2], 0.0, 0.0));
                else
                    ε̄u = shape_symmetric_gradient(cellvalues_u, q_point, j);
                end
                Ke[i, j] += δε ⊡ Dᵉ ⊡ ε̄u * dΩᵤ;
            end
            Re[i] += δε ⊡ σ * dΩᵤ;
        end
    end
    symmetrize_lower!(Ke)
    return Ke, Re
end

function assemble_residual_u!(Re::Vector, cellvalues_u,ue::Vector, material::Material, state, state_old, store::Bool)
    nbase_u = getnbasefunctions(cellvalues_u);
    @inbounds for q_point in 1:getnquadpoints(cellvalues_u)
        dΩᵤ = getdetJdV(cellvalues_u, q_point);
        ϕ = state[q_point].ϕ;
        if material.dim == 2
            ε_PlaneStrain = function_symmetric_gradient(cellvalues_u, q_point, ue);
            ∇ˢu = SymmetricTensor{2,3,Float64}((ε_PlaneStrain[1, 1], ε_PlaneStrain[1, 2], 0.0, ε_PlaneStrain[2, 2], 0.0, 0.0));
        elseif material.dim == 3
            ∇ˢu = function_symmetric_gradient(cellvalues_u, q_point, ue);
        else
            error("Invalid element dimension");
        end
        
        gd, _, _ = Degradation(ϕ, material);
        Ψ⁺, _, σ, _ = Constitutive(∇ˢu, material, gd);
        H = max(Ψ⁺, state_old[q_point].H);
        if store
            state[q_point] = HistoryVariable(H, ϕ);
        end
        @inbounds for i in 1:nbase_u
            if material.dim == 2
                δε_2d = shape_symmetric_gradient(cellvalues_u, q_point, i);
                δε = SymmetricTensor{2,3,Float64}((δε_2d[1, 1], δε_2d[1, 2], 0.0, δε_2d[2, 2], 0.0, 0.0));
            else
                δε = shape_symmetric_gradient(cellvalues_u, q_point, i);
            end
            Re[i] += (δε ⊡ σ) * dΩᵤ;
        end
    end
    return Re
end

function assemble_element_Ku!(Ke, cellvalues_u, ue, material, state, state_old)
    nbase_u = getnbasefunctions(cellvalues_u);
    @inbounds for q_point in 1:getnquadpoints(cellvalues_u)
        dΩᵤ = getdetJdV(cellvalues_u, q_point)
        if material.dim == 2
            ε_PlaneStrain = function_symmetric_gradient(cellvalues_u, q_point, ue)
            ∇ˢu = SymmetricTensor{2,3,Float64}((ε_PlaneStrain[1, 1], ε_PlaneStrain[1, 2], 0.0,ε_PlaneStrain[2, 2], 0.0, 0.0))
        elseif material.dim == 3
            ∇ˢu = function_symmetric_gradient(cellvalues_u, q_point, ue)
        else
            error("Invalid element dimension")
        end

        ϕ = state[q_point].ϕ
        gd, _, _ = Degradation(ϕ, material);
        _, Dᵉ, _ = Constitutive(∇ˢu, material, gd);

        @inbounds for i in 1:nbase_u
            if material.dim == 2
                δε_2d = shape_symmetric_gradient(cellvalues_u, q_point, i);
                δε = SymmetricTensor{2,3,Float64}((δε_2d[1, 1], δε_2d[1, 2], 0.0,δε_2d[2, 2], 0.0, 0.0));
            else
                δε = shape_symmetric_gradient(cellvalues_u, q_point, i);
            end
            @inbounds for j in 1:i
                if material.dim == 2
                    ε_2d = shape_symmetric_gradient(cellvalues_u, q_point, j);
                    ε̄u = SymmetricTensor{2,3,Float64}((ε_2d[1, 1], ε_2d[1, 2], 0.0,
                        ε_2d[2, 2], 0.0, 0.0));
                else
                    ε̄u = shape_symmetric_gradient(cellvalues_u, q_point, j);
                end
                Ke[i, j] += δε ⊡ Dᵉ ⊡ ε̄u * dΩᵤ;
            end
        end
    end
    symmetrize_lower!(Ke)
    return Ke
end

function assemble_global_Ku(q::Vector, cellvalues, K::SparseMatrixCSC, dh::DofHandler, material::Material, states, states_old)
    nbase = getnbasefunctions(cellvalues);

    Ke = zeros(nbase, nbase);
    assembler = start_assemble(K);

    @inbounds for (i, cell) in enumerate(CellIterator(dh))
        reinit!(cellvalues, cell);
        fill!(Ke, 0);
        eldofs = celldofs(cell);
        qe = q[eldofs];
        state = @view states[:, i];
        state_old = @view states_old[:, i];
        assemble_element_Ku!(Ke, cellvalues, qe, material, state, state_old);
        assemble!(assembler, eldofs, Ke);
    end
    return K
end;